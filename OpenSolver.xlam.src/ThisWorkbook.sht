VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit

'====================================================================
' Excel 2003 Menu Code
' Provided by Paul Becker of Eclipse Engineering (www.eclipseeng.com)
'====================================================================
Private Sub Workbook_AddinInstall()
1         AlterMenuItems (True)
End Sub

Private Sub Workbook_AddinUninstall()
1         AlterMenuItems (False)
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
          ' Only check on Windows since .VBASigned doesn't seem to exist on Mac
          #If Win32 Then
1             If Not ThisWorkbook.Saved And Not ThisWorkbook.VBASigned Then
              
                  Dim Answer As VbMsgBoxResult
2                 Answer = MsgBox(ThisWorkbook.Name & " is unsaved. Save?", _
                                  vbExclamation + vbYesNoCancel, "Unsaved Addin")
3                 If Answer = vbYes Then
4                     ThisWorkbook.Save
5                 ElseIf Answer = vbNo Then
                      ' Do nothing special and proceed as normal
6                 Else
                      ' Not yes or no - should be cancel, but we just abort the close either way
7                     Cancel = True
8                     Exit Sub
9                 End If
10            End If
          #End If

DoClose:
11        On Error Resume Next
12        AlterMenuItems (False)
13        DeleteTempFolder
14        On Error GoTo 0
End Sub

Private Sub Workbook_Open()
1         AlterMenuItems (True)
End Sub
'====================================================================
' Excel 2003 Menu Code
' Provided by Paul Becker of Eclipse Engineering (www.eclipseeng.com)
'====================================================================

'====================================================================
' Excel Code Exporter by Mike Woodhouse
' Released under MIT License at https://xlvbadevtools.codeplex.com/
'====================================================================
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

1         If MsgBox("Export VBA Code and tidy up?", vbYesNo, "Before you go") = vbYes Then
2             ExportVBACode
3             CreateRibbonXML
4             DoTidyUp
5         End If

6         If MsgBox("Close all VB windows? Do this before release!", vbYesNo, "Before you go") = vbYes Then
7             CloseAllVBEWindows
8         End If
End Sub

Sub CloseAllVBEWindows()
          Dim i As Long
1         With Application.VBE.Windows
2             For i = .Count To 1 Step -1
                  ' Window types:
                  '   0 - Code
                  '   1 - Form
                  '   2 - Object Browser
                  '   3 - Watches
                  '   4 - Locals
                  '   5 - Immediates
                  '   6 - Project Explorer
                  '   7 - Properties
3                 If .Item(i).Type < 2 Then .Item(i).Close
4             Next i
5         End With
End Sub

Public Sub ExportVBACode()

1         With New CodeExporter
2             Set .SourceWorkbook = ThisWorkbook
3             .ExportTo exportPath
4         End With

End Sub

Private Function exportPath() As String

1         exportPath = ThisWorkbook.FullName & ".src"
2         If Not FileOrDirExists(exportPath) Then
              ' Modification JWD: We need late binding on FSO here to avoid a dependence on Microsoft Scripting Runtime
              Dim fso As Object ' FileSystemObject
3             Set fso = CreateObject("Scripting.FileSystemObject")
4             fso.GetFolder(ThisWorkbook.Path).SubFolders.Add (ThisWorkbook.Name & ".src")
5         End If
              

End Function
'====================================================================
' Excel Code Exporter by Mike Woodhouse
' Released under MIT License at https://xlvbadevtools.codeplex.com/
'====================================================================

Private Sub DoTidyUp()
          ' Clear help file
1         ThisWorkbook.VBProject.HelpFile = vbNullString
          
          ' Set version number in file properties to the current value
          ' Adapted from Pearson code: www.cpearson.com/Excel/DocProp.apsx
2         On Error Resume Next
3         ThisWorkbook.BuiltinDocumentProperties("Document version").value = sOpenSolverVersion & " (" & sOpenSolverDate & ")"
End Sub
