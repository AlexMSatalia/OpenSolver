VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CQuickSolve"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
' OpenSolver
' Copyright Andrew Mason 2010
' http://www.OpenSolver.org
' This software is distributed under the terms of the GNU General Public License
'
' This file is part of OpenSolver.
'
' OpenSolver is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' OpenSolver is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with OpenSolver.  If not, see <http://www.gnu.org/licenses/>.
'
' v0.97: Removed a bug in handling of multi-area ranges; code now uses:
'   for each c in range
' and does not index cells within the range directly

' v1.0 - updated to handle all constraints as ranges to increase speed. Kathleen Gilbert 01.2011
Option Explicit

' THis class defines how we update a model when the values inside a parameter range are altered.
' Specifically, it records how the RHS of a model built from Solver data vary as the values
' in a range of 'parameter' cells vary

' 20110928 AJM: Converted from a() to SparseA() to handle larger problems

Private NumRows As Long
Private NumParams As Long
Private OriginalParamValues() As Double
Private OriginalRHS() As Double
' Private a() As Double
Private SparseA() As CIndexedCoeffs

Private CurrentParameterRange As Range


Function AnalyseParameters(OpenSolver As COpenSolver, sheetName As String, _
                NumConstraints As Long, ByRef RHS() As Double, _
                ByRef LHSRange() As Range, ByRef RHSRange() As Range, _
                ByRef RHSFormula() As String, _
                ByRef RHSType() As SolverInputType, ByRef LHSOriginalValues As Variant, ByRef RHSOriginalValues As Variant) As Boolean

          ' This builds a model of the form RHS = InitialRHS + A_param * (Param - InitialParam)
          ' where b = solver model constraint RHS values
          '       b_param = value of b when each parameter is 0
          '       A_param is a matrix
          '       Param is the vector of the current parameter values
          ' Returns true if successful
          ' Note: Will update arguments LHSValue and RHSValue to the current values of these cells on the spreadsheet
          ' This remembers the parameter range for which we have built the model for checking later
          
2618      On Error GoTo errorHandler
2619      Set CurrentParameterRange = Nothing
          
          ' Remember the current number of rows and original RHS values
          Dim i As Long, oldCalculationMode As Long
          
2620      NumRows = OpenSolver.GetNumRows
          
2621      oldCalculationMode = Application.Calculation

2622      If NumRows > 0 Then ReDim OriginalRHS(NumRows) As Double
2623      For i = 1 To NumRows
2624          OriginalRHS(i) = RHS(i)
2625      Next i
          
          ' Find the Parameter range, and get the numer of parameters
          Dim ParamRange As Range
2626      If Not OpenSolverModule.CheckModelHasParameterRange Then
2627          Exit Function   ' Error message already shown
2628      End If
2629      Set ParamRange = OpenSolverModule.RemoveRangeOverlap(Range(sheetName & OpenSolverModule.GetParamRangeName))
          
          Dim BadCell As Range
2630      If Not OpenSolverModule.CheckRangeContainsNoAmbiguousMergedCells(ParamRange, BadCell) Then
2631          MsgBox "QuickSolve Initialisation Failed: The parameter " & BadCell.AddressLocal(RowAbsolute:=False, ColumnAbsolute:=False) & " is inaccessible as it is within the merged range " & BadCell.MergeArea.AddressLocal(RowAbsolute:=False, ColumnAbsolute:=False) & ".", , "OpenSolver" & sOpenSolverVersion & " Error"
2632          GoTo ExitSub
2633      End If
          
2634      NumParams = ParamRange.Count
          
          ' Remember the original parameter values
          ' Warning: Do not use ParamRange(i) as this fails with more than 1 area; using "for each" seems to work
          ' TODO: THis is very slow; speed it up
          Dim c As Range
2635      If NumParams > 0 Then ReDim OriginalParamValues(NumParams) As Double
2636      i = 1
2637      For Each c In ParamRange
2638          OriginalParamValues(i) = c.Value2
2639          i = i + 1
2640      Next c
          
          ' Get current values for the LHS cell and RHS cell of the Excel constraints
          ' Note: If LHSIsRange(i)=false, then LHSValue(i) already contains the fixed constant value given in the constraint
          
          ' Look at how the LHSRange and RHSRange values now change as we perturb the parameters, and hence deduce how the OpenSolver model's RHS values alter
2641      Application.Calculation = xlCalculationManual
2642      Application.ScreenUpdating = False
          
          Dim param As Long, row As Long, NonZeros As Long, constraint As Long
          Dim CurrentLHSValues  As Variant, CurrentRHSValues As Variant
2643      param = 0
          
2644      If NumRows > 0 And NumParams > 0 Then ReDim SparseA(NumRows) ' ReDim a(NumRows, NumParams) As Double
2645      For row = 1 To NumRows
2646          Set SparseA(row) = New CIndexedCoeffs
2647      Next row
         
2648      For Each c In ParamRange
2649          If c.HasArray Then
2650              MsgBox "QuickSolve Initialisation Failed: OpenSolver cannot perform quick solves for parameters that contain array formulae.", , "OpenSolver" & sOpenSolverVersion & " Error"
2651              GoTo ExitSub
2652          End If
2653          param = param + 1
2654          If param Mod 10 = 1 Then Application.StatusBar = "OpenSolver: Analysing Parameters... " & param & "/" & NumParams & " parameters"
              Dim OldFormula As String
2655          On Error Resume Next
2656          OldFormula = c.Formula
2657          If Err.Number <> 0 Then
                  ' There was an error changing a paramater cell; inform the user
2658              MsgBox "QuickSolve Initialisation Failed: An error (" & Err.Number & " " & Err.Description & IIf(Erl = 0, "", " at line " & Erl) & ") occurred while changing the value in parameter cell " & c.AddressLocal(RowAbsolute:=False, ColumnAbsolute:=False) & ".", , "OpenSolver" & sOpenSolverVersion & " Error"
2659              GoTo ExitSub
2660          End If
              ' Change the parameter value, and see hopw the RHS's change
2661          On Error GoTo errorHandler
2662          c.Value2 = OriginalParamValues(param) + 1
2663          Application.Calculate
2664          row = 1
              Dim j As Long, coeff As Double
2665          For constraint = 1 To NumConstraints
                  ' Check to see what is different and add rows to sparsea
2666              If Not LHSRange(constraint) Is Nothing Then ' skip Binary and Integer constraints
                      Dim OriginalLHSValues As Variant
                      Dim OriginalRHSValues As Variant
2667                  OriginalLHSValues = LHSOriginalValues(constraint)
2668                  OriginalRHSValues = RHSOriginalValues(constraint)
                      ' Get current value(s) for LHS and RHS of this constraint off the sheet. LHS is always an array (even if 1x1)
2669                  OpenSolver.GetCurrentConstraintValues constraint, CurrentLHSValues, CurrentRHSValues
                      'TODO Put in better error trapping for errors that occur on the s/sheet
2670                  For i = 1 To UBound(OriginalLHSValues, 1) ' number of rows
2671                      For j = 1 To UBound(OriginalLHSValues, 2) ' number of columns
2672                          If RHSType(constraint) = SolverInputType.MultiCellRange Then
2673                              coeff = -(CurrentLHSValues(i, j) - OriginalLHSValues(i, j)) + (CurrentRHSValues(i, j) - OriginalRHSValues(i, j))
                                  'a(Row, param)  = coeff
2674                              If coeff <> 0 Then
2675                                  SparseA(row).Add param, coeff
2676                                  NonZeros = NonZeros + 1
2677                              End If
2678                          ElseIf RHSType(constraint) = SolverInputType.SingleCellRange Or RHSType(constraint) = SolverInputType.Formula Then
2679                              coeff = -(CurrentLHSValues(i, j) - OriginalLHSValues(i, j)) + (CurrentRHSValues - OriginalRHSValues)
2680                              If coeff <> 0 Then
2681                                  SparseA(row).Add param, coeff
2682                                  NonZeros = NonZeros + 1
2683                              End If
2684                          Else 'the rhs of this constraint is a constant
2685                              coeff = -(CurrentLHSValues(i, j) - OriginalLHSValues(i, j))
2686                              If coeff <> 0 Then
2687                                  SparseA(row).Add param, coeff
2688                                  NonZeros = NonZeros + 1
2689                              End If
2690                          End If
2691                          row = row + 1
2692                      Next j
2693                  Next i
                      ' End If
2694              End If
2695          Next constraint
2696          c.Formula = OldFormula
2697      Next c
          
2698      If NonZeros = 0 Then
2699          MsgBox "QuickSolve Initialisation Failed: The model's constraints do not depend on the QuickSolve parameter cells; please try again. (The QuickSolve process is used for repeatedly solving a model after making changes to the parameter cells, where these changes result in changes to the model's constraints.)", , "OpenSolver" & sOpenSolverVersion & " Error"
2700          GoTo ExitSub
2701      End If
          
2702      Set CurrentParameterRange = ParamRange
2703      AnalyseParameters = True    ' success
          
ExitSub:
          ' On Error GoTo 0
2704      Application.StatusBar = False ' Resume normal status bar behaviour
2705      Application.ScreenUpdating = True
2706      Application.Calculation = oldCalculationMode
              
2707      Exit Function

errorHandler:
2708      If Err.Number = 18 Then
2709          If MsgBox("You have pressed the Escape key. Do you wish to cancel?", _
                         vbCritical + vbYesNo + vbDefaultButton1, _
                         "OpenSolver: User Interrupt Occured...") = vbNo Then
2710              Resume 'continue on from where error occured
2711          Else
2712              Resume ExitSub
2713          End If
2714      End If
2715      MsgBox "OpenSolver encountered error " & Err.Number & ":" & vbCrLf & Err.Description & IIf(Erl = 0, "", " (at line " & Erl & ")") & vbCrLf & "Source = " & Err.Source, , "OpenSolver Code Error"
2716      Resume ExitSub
2717      Resume
End Function

Public Function UpdateModelRHS(sheetName As String, ByRef RHS() As Double) As Boolean
          ' Given the new Parameter values on the worksheet, calculate a new set of model RHS values
          
          ' Find the Parameter range on the given (current) sheet, and check that this is the range we are set up for
          Dim ParamRange As Range
2718      On Error Resume Next
2719      Set ParamRange = Range(sheetName & GetParamRangeName)
2720      If Err.Number <> 0 Then
2721          MsgBox "Error: No Parameter range could be found on the worksheet.", , "OpenSolver" & sOpenSolverVersion & " Error"
2722          UpdateModelRHS = False
2723          Exit Function
2724      End If
2725      On Error GoTo 0
2726      If (CurrentParameterRange.Address <> ParamRange.Address) Or (CurrentParameterRange.Worksheet.Name <> ParamRange.Worksheet.Name) Then
2727          MsgBox "QuickSolve Failed: You need to initialize the QuickSolve engine for the current parameters.", title:="OpenSolver" & sOpenSolverVersion & " Error"
2728          UpdateModelRHS = False
2729          Exit Function
2730      End If
2731      If NumParams <> ParamRange.Count Then
2732          MsgBox "QuickSolve Failed: The number of values in the Parameter range has changed, and so the model update can not be completed.", , "OpenSolver" & sOpenSolverVersion & " Error"
2733          UpdateModelRHS = False
2734          Exit Function
2735      End If
          
          Dim ParamChanges() As Double
2736      If NumParams > 0 Then ReDim ParamChanges(NumParams) As Double
          Dim param As Long, c As Range
2737      param = 1
2738      For Each c In ParamRange
2739          ParamChanges(param) = c.Value2 - OriginalParamValues(param)
2740          param = param + 1
2741      Next c
          
          Dim row As Long, value As Double, i As Long, coeff As Double
2742      For row = 1 To NumRows
2743          value = OriginalRHS(row)
              'For param = 1 To NumParams
              '    If a(Row, param) <> 0 Then
              '        Value = Value + a(Row, param) * ParamChanges(param)
              '    End If
              'Next param
2744          With SparseA(row)
2745              For i = 1 To .Count
2746                  param = .index(i)
2747                  coeff = .Coefficient(i)
2748                  value = value + coeff * ParamChanges(param)
2749              Next i
2750          End With
2751          RHS(row) = value
2752      Next row
          
2753      UpdateModelRHS = True    ' success

End Function
